create table books
(Book_ID int primary key,
Title varchar(100) not null ,
Author varchar(100),
Genre varchar(50),
Published_Year int,
Price numeric(5,2),
Stock int
);


create table customers(
Customer_ID int primary key,
Name varchar(100),
Email varchar(100),
Phone int,
City varchar(100),
Country varchar(50)
);

alter table customers
alter column country type varchar(100)


create table orders(
Order_ID int,
Customer_ID int,
Book_ID int,
Order_Date int,
Quantity int,
Total_Amount int,
constraint fk_books
foreign key (Book_ID) references books(Book_ID),
constraint fk_customers
foreign key (customer_id) references customers(customer_id)
);



alter table orders
alter column order_date type date
using to_date(order_date::text, 'yyyymmdd');

alter table orders 
alter column total_amount type numeric(5,2)

copy Books from 'D:\(DATA) Data Analysis\Library_(Books).csv' delimiter ',' csv header;
copy customers from 'D:\(DATA) Data Analysis\Library_(Customers).csv' delimiter ',' csv header;

ALTER TABLE orders DROP CONSTRAINT fk_books;
ALTER TABLE orders DROP CONSTRAINT fk_customers;

COPY orders FROM 'D:\(DATA) Data Analysis\Library_(Orders).csv' DELIMITER ',' CSV HEADER;

ALTER TABLE orders ADD CONSTRAINT fk_books FOREIGN KEY (book_id) REFERENCES books(book_id);
ALTER TABLE orders ADD CONSTRAINT fk_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id);


--Select all books from books.

select books from books;

--Select all customers from customers.

select customers from customers;

--Count the total number of books.

select count(distinct books) from books;

--Count the total number of customers.

select count(distinct customers) from customers;

--Find all books priced above 20.

select * from books
where price>20;

--Find all orders where quantity > 5.

select * from orders
where quantity>5;

--Display all customers in a specific city.

select * from customers
where city = 'Lake Robert';

--Display all orders for a specific customer.

select * from orders
where customer_id = 84;

--Find books by a specific author.

select * from books
where author = 'Juan Miller';

--Sort books by published year ascending.

select * from books
order by published_year;

--Sort books by price descending.

select * from books
order by price;

--Select unique genres from books.

select distinct genre from books;

--Find customers with email ending in @gmail.com.

select * from customers 
where email like '%@gmail.com';

--Find orders with total_amount greater than 1000.

select * from orders
where total_amount>1000;

--Select books with stock less than 10.

select * from books
where stock<10;

--ðŸ›  Intermediate Tasks (Joins & Aggregations)

--List all orders with book titles and customer names (JOIN).

select o.order_id,o.quantity, b.title, c.name
from orders o 
join books b on b.book_id=o.book_id
join customers c on c.customer_id=o.customer_id;

--Count how many books each customer has ordered.

select c.name, sum(o.quantity) as total_order
from orders o 
join customers c on c.customer_id=o.customer_id
group by c.name;

--Find the total amount spent by each customer.

select c.name, sum(o.total_amount) as total_amount
from orders o 
join customers c on c.customer_id=o.customer_id
group by c.name;

--Find the most expensive book ordered by each customer.

select c.name, o.order_id, max(b.price)as most_expenisve_book
from orders o
join books b on b.book_id=o.book_id
join customers c on c.customer_id=o.customer_id
group by o.order_id, c.name
having max(b.price)>30
order by max(b.price)desc;


--Find the total quantity of each book sold.

select b.title, sum(o.quantity) as total_quantity_sold
from orders o
join books b on b.book_id=o.book_id
group by b.title;

--List all orders along with the genre of the book.

select o.order_id, o.quantity, b.title, b.genre
from orders o 
join books b on b.book_id=o.book_id;

--Find the average price of books in each genre.

select genre, avg(price) from books
group by genre;

--Find customers who ordered more than 3 books.

select c.name,  count(distinct b.book_id)
from orders o 
join customers c on c.customer_id=o.customer_id
join books b on b.book_id=o.book_id
group by c.name
having  count(distinct b.book_id)>3;

--Find books never ordered.

SELECT b.book_id, b.title, b.author
FROM books b
LEFT JOIN orders o ON b.book_id = o.book_id
WHERE o.book_id IS NULL;


--Find customers who havenâ€™t placed any orders.

select c.customer_id, c.name
from customers c 
left join orders o on c.customer_id=o.customer_id
where o.customer_id is null;

--Find the total revenue generated by each book.

select b.title, sum(total_amount)as total_revenue
from books b
join orders o on b.book_id=o.book_id
group by b.title;

--Find orders where the book price is above average.

select o.order_id, o.customer_id, o.book_id, b.title, b.price, o.quantity, o.total_amount
from orders o 
join books b on b.book_id=o.book_id
where b.price>(select avg(price)from books);


--Find customers who spent more than the average amount.

select c.name, o.total_amount
from orders o 
join customers c on c.customer_id=o.customer_id
where o.total_amount>(select avg(total_amount)from orders);

--Find books with the highest stock.

select * from books
order by stock desc;

--List the last 5 orders placed.

select * from orders
order by order_date desc
limit 5;

--âš¡ Advanced Tasks (Complex Queries & Subqueries)

--Find the customer who spent the most money.

select c.name, sum(o.total_amount)as total_spent
from orders o
join customers c on c.customer_id=o.customer_id
group by c.name
order by sum(o.total_amount) desc;

--Find the book with the highest total sales (quantity Ã— price).

select b.title, sum(o.total_amount)as total_sales
from orders o 
join books b on b.book_id=o.book_id
group by b.title
order by sum(o.total_amount)desc;


--Find the genre that generated the highest revenue.

select b.genre, sum(o.total_amount)as total_reve_bygenre
from orders o 
join books b on b.book_id=o.book_id
group by b.genre
order by sum(o.total_amount)desc;

--List orders where total_amount doesnâ€™t match price Ã— quantity.

select o.order_id, o.customer_id, o.book_id, b.title, b.price, o.quantity, o.total_amount, (b.price * o.quantity) as calculated_amount
from orders o 
join books b on b.book_id=o.book_id
where o.total_amount <> (b.price * o.quantity);

--Find customers who ordered books from a specific genre.
select * from books;
select c.name, count(o.order_id)as total_orders
from orders o 
join books b on b.book_id=o.book_id
join customers c on c.customer_id=o.customer_id
where b.genre = 'Romance'
group by c.name
order by total_orders desc;

--Find the top 3 best-selling books.

select b.title, sum(o.quantity) as total_sales_quantity
from orders o 
join books b on b.book_id=o.book_id
group by b.title
order by sum(o.quantity) desc
limit 3;

--Find the top 3 customers who placed the most orders.

select c.name, count(o.quantity) as most_orders
from orders o 
join customers c on o.customer_id=c.customer_id
group by c.name 
order by count(o.quantity) desc
limit 3;

--Find books that were ordered more than twice by the same customer.

SELECT o.customer_id,
       c.name AS customer_name,
       o.book_id,
       b.title AS book_title,
       COUNT(o.book_id) AS order_count
FROM orders o
JOIN books b ON o.book_id = b.book_id
JOIN customers c ON o.customer_id = c.customer_id
GROUP BY o.customer_id, c.name, o.book_id, b.title
HAVING COUNT(o.book_id) > 2;


--List books ordered in the last 30 days.
SELECT o.order_id,
       o.customer_id,
       c.name AS customer_name,
       o.book_id,
       b.title AS book_title,
       o.order_date,
       o.quantity,
       o.total_amount
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN books b ON o.book_id = b.book_id
WHERE o.order_date >= (select max(order_date) from orders) - INTERVAL '30 days'
ORDER BY o.order_date DESC;



--Find the average order amount per month.

SELECT TO_CHAR(order_date, 'YYYY-MM') AS month,
       AVG(total_amount) AS avg_order_amount
FROM orders
GROUP BY TO_CHAR(order_date, 'YYYY-MM')
ORDER BY month ;


--Find the total revenue per month.

select to_char(order_date, 'yyyy-mm') as month,
sum(total_amount) as total_revenue_month
from orders
group by to_char(order_date, 'yyyy-mm')
order by month;

--Rank books by total revenue (using RANK() or ROW_NUMBER()).

select b.book_id, b.title as book_title, sum(o.total_amount)as total_revenue, 
rank() over (order by sum(o.total_amount)desc) as revenue_rank
from orders o
join books b on b.book_id=o.book_id
group by b.book_id, b.title
order by revenue_rank;

--Rank customers by total orders placed.

select c.customer_id, c.name, count(o.quantity) as total_order,
rank () over(order by count(o.quantity) desc) as orders_rank
from orders o 
join customers c on c.customer_id=o.customer_id
group by c.customer_id, c.name
order by orders_rank;

--Find the first order date of each customer.

select  customer_id, min(order_date) as first_order_date
from orders
group by customer_id
order by first_order_date;

--Find the last order date of each customer.

select customer_id, min(order_date) as last_order_date
from orders
group by customer_id
order by last_order_date;

--ðŸš€ Professional/Job-Ready Projects

--Create a sales summary report showing book title, total quantity sold, total revenue, and average order value.

select 
b.title,
sum(o.quantity) as total_quantity_sold,
sum(o.total_amount) as total_revenue,
avg(o.total_amount) as avg_order_value
from orders o
join books b on b.book_id=o.book_id
group by b.title
order by total_revenue desc;


--Create a customer loyalty report: customers ordered > 5 times or spent > 5000.

select
c.name, 
count(o.order_id) as total_orders,
sum(o.total_amount) as total_spent
from orders o 
join customers c on c.customer_id=o.customer_id
group by c.name 
having count(o.quantity)>5 or sum(o.total_amount)>5000;

--Generate a monthly revenue report with trend analysis.

select to_char(order_date, 'yyyy-mm') as month,
sum(total_amount) as monthly_revenue
from orders 
group by to_char(order_date, 'yyyy-mm')
order by sum(total_amount) desc;

--Create a low-stock alert: books with stock < 5 and ordered in the last month.

select b.title, b.stock, o.order_id
from orders o 
join books b on b.book_id=o.book_id
group by b.title,b.stock, o.order_id, o.order_date
having b.stock<5 and o.order_date >= (select max (order_date) from orders) - interval'30days';

--Write a stored procedure to insert a new order and automatically update book stock.

CREATE OR REPLACE PROCEDURE insert_order(
    p_customer_id INT,
    p_book_id INT,
    p_quantity INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_price NUMERIC(5,2);
    v_stock INT;
BEGIN
    -- Check current stock
    SELECT stock, price INTO v_stock, v_price
    FROM books
    WHERE book_id = p_book_id;

    IF v_stock IS NULL THEN
        RAISE EXCEPTION 'Book with ID % does not exist', p_book_id;
    ELSIF v_stock < p_quantity THEN
        RAISE EXCEPTION 'Not enough stock for Book ID %', p_book_id;
    END IF;

    -- Insert into orders table
    INSERT INTO orders(order_id, customer_id, book_id, order_date, quantity, total_amount)
    VALUES (
        nextval('orders_order_id_seq'),  -- assumes you have a sequence for order_id
        p_customer_id,
        p_book_id,
        CURRENT_DATE,
        p_quantity,
        p_quantity * v_price
    );

    -- Update stock in books table
    UPDATE books
    SET stock = stock - p_quantity
    WHERE book_id = p_book_id;

END;
$$;


CREATE SEQUENCE orders_order_id_seq START 1;

ALTER TABLE orders
ALTER COLUMN order_id SET DEFAULT nextval('orders_order_id_seq');

                        --example usage
call insert_order(1,101,3);				

--Write a trigger to update total_amount whenever quantity or price changes.

CREATE OR REPLACE FUNCTION update_total_amount()
RETURNS TRIGGER AS $$
BEGIN
                   -- Update total_amount whenever quantity or book_id changes
    NEW.total_amount := NEW.quantity * (SELECT price FROM books WHERE book_id = NEW.book_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_total_amount
BEFORE INSERT OR UPDATE OF quantity, book_id ON orders
FOR EACH ROW
EXECUTE FUNCTION update_total_amount();

              -- Insert an order (total_amount auto-calculated)
INSERT INTO orders(customer_id, book_id, quantity)
VALUES (1, 101, 3);

               -- Update quantity (total_amount auto-updated)
UPDATE orders
SET quantity = 5
WHERE order_id = 1;


--Write a view showing orders with customer and book details.

select o.order_id, o.quantity, c.customer_id, c.name, b.book_id, b.title, b.author
from orders o 
join customers c on c.customer_id=o.customer_id
join books b on b.book_id=o.book_id

--Write a view showing top-selling books per genre.

create or replace view topsellingbookpergenre as with rankedbooks as (
select b.genre, b.title, count(o.order_id) as total_orders,
row_number() over (partition by b.genre order by count (o.order_id)desc) as rn
from orders o 
join books b on b.book_id=o.book_id
group by b.genre, b.title
)
select genre, title, total_orders
from rankedbooks
where rn = 1;

select * from topsellingbookpergenre;

--Optimize queries using indexes on book_id, customer_id, and order_date.

create index idx_orders_customer_id on orders(customer_id);

select sum(total_amount)
from orders
where customer_id = 101;

create index idx_orders_customer_date on orders (customer_id, order_date);

select * from orders
where customer_id = 101
and order_date between '2023-01-02' and '2023-04-01';


select * from orders o
join customers c on o.customer_id=c.customer_id
join books b on b.book_id=o.book_id;



